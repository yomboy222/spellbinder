/* oath-party.js */

/* code generated by command: python3 create_level.py "name=oath-party" "initialSpells=add-edge,remove-edge,reversal" "targetThing=treasure" "room=name:room1,things:oath,exits:E/room2" "room=name:room2,things:party,exits:E/room3 W/room1" "room=name:room3,things:board,exits:E/room4/board W/room2" "room=name:room4,things:pond,exits:E/room5/pond W/room3" "room=name:room5,things:key balloon portcullis,exits:E/room6/portcullis W/room4" "room=name:room6,things:ape,exits:E/room7/ape W/room5" "room=name:room7,things:treasure,exits:W/room6" */

levelList.push( { name:'oath-party', difficulty:5 } );

getLevelFunctions['oath-party'] = function() {

    let level = new Level('oath-party');
    level.folderName = 'oath-party';

    level.defineThingSubclasses = function() { 

        window.Ape = class Ape extends Thing {
        }

        window.Balloon = class Balloon extends Thing {
            handleDblclick(e) {
                if (this.y < 200) {
                    displayMessage('You cannot reach this!', DEFAULT_MESSAGE_DURATION);
                }
                else
                    return super.handleDblclick(e);
            }
        }

        window.Boa = class Boa extends Thing {
        }

        window.Boar = class Boar extends Thing {
            constructor(word,room,x,y,isonymIndex) {
                super(word,room,x,y,isonymIndex);
                this.initialY = 88 * yScaleFactor;
                this.y = this.initialY;
                this.facingRight = true;
                if (typeof level['boarInTrap'] === 'undefined' || level['boarInTrap'] === false) {
                    this.moveLeft();
                }
                if (typeof this.captionDiv !== 'undefined') {
                    this.captionDiv.style.display = 'none'; // don't display caption while running
                }
            }

            /*
            okayToDisplayWord() {
                return (typeof this['doneInitializing'] === 'undefined') || level['boarInTrap'];
                // important for this to return true in constructor, i.e. before doneInitializing set to true,
                // so that the caption div is created when the Boar object is created.
            }

             */

            extraTransformIntoBehavior() {
                this.initialY = 88 * yScaleFactor;
                if (typeof this.captionDiv !== 'undefined') {
                    this.captionDiv.style.display = 'none'; // don't display caption while running
                }
            }

            extraTransformFromBehavior() {
                level.boarInTrap = false;
            }
            moveRight() {
                if (!level.boarInTrap) {
                    this.facingRight = true;
                    this.extraPostMovementBehavior = this.moveLeft;
                    this.setMovement(90 * xScaleFactor, 88 * yScaleFactor, 1100);
                }
            }
            moveLeft() {
                if (!level.boarInTrap) {
                    this.facingRight = false;
                    this.extraPostMovementBehavior = this.moveRight;
                    this.setMovement(10 * xScaleFactor, 88 * yScaleFactor, 1100);
                }
            }
            handleClick() {
                if (typeof level['boarInTrap'] != 'undefined' && level['boarInTrap'] === false) {
                    displayMessage('The boar is too fast for you!', DEFAULT_MESSAGE_DURATION);
                    return true;
                }
                else {
                    return super.handleClick();
                }
            }
            handleDblclick(e) {
                if (typeof level['boarInTrap'] != 'undefined' && level['boarInTrap'] === false) {
                    displayMessage('The boar is too fast for you!', DEFAULT_MESSAGE_DURATION);
                    return true;
                }
                else {
                    return super.handleDblclick();
                }
            }
            update() {
                super.update();
                if ('trap' in thingsHere && typeof level['boarInTrap'] != 'undefined' && level['boarInTrap'] === false) {
                    // boar is running and trap is present; check if caught:
                    let trap = thingsHere['trap'];
                    if (this.x > trap.x - 12 && this.x < trap.x + 12) {
                        // caught!
                        level.boarInTrap = true;
                        displayMessage('The boar is caught in the trap!', 2 * DEFAULT_MESSAGE_DURATION);
                        this.destX = trap.y - 20;
                        this.destY = trap.x + 20;
                        if (typeof this.captionDiv !== 'undefined') {
                            this.captionDiv.style.display = 'block'; // display caption while trapped
                        }
                        this.concludeMovement(); // this will call extraPostMovementBehavior, which will be either moveRight or moveLeft, so these need to check boarInTrap.
                    }
                }
            }
            draw() {
                if (level.boarInTrap || !this.facingRight) {
                    return super.draw();
                }
                else {
                    ctx.translate(this.x + this.width,this.y);
                    // scaleX by -1; this "trick" flips horizontally
                    ctx.scale(-1,1);
                    ctx.drawImage(this.image,0 + this.halfWidth, 0 - this.halfHeight, this.width, this.height);
                    // always clean up -- reset transformations to default
                    ctx.setTransform(1,0,0,1,0,0);
                }
            }
        }

        window.Board = class Board extends Thing {
            passageBlockingBehavior() {
                displayMessage('The door is boarded up!', DEFAULT_MESSAGE_DURATION);
            }
        }

        window.Boat = class Boat extends Thing {
            handleDblclick(e) {
                if (currentRoom === 'room4') {
                    if ('oar' in inventory) {
                        newRoom('room5',25,75,'You row to the far shore!');
                        this.initialX = 20 * xScaleFactor;
                        this.x = this.initialX;
                        this.putIntoThingsHere(true);
                    }
                    else {
                        displayMessage('You have nothing to propel the boat with!', DEFAULT_MESSAGE_DURATION);
                    }
                }
                else if (currentRoom === 'room5') {
                    if ('oar' in inventory) {
                        newRoom('room4',75,75,'You row to the far shore!');
                        this.initialX = 80 * xScaleFactor;
                        this.x = this.initialX;
                        this.putIntoThingsHere();
                    }
                    else {
                        displayMessage('You have nothing to propel the boat with!', DEFAULT_MESSAGE_DURATION);
                    }
                }
                else {
                    return super.handleDblclick(e);
                }
            }
        }

        window.Dart = class Dart extends Thing {
            handleDblclick(e) {
                if ('balloon' in thingsHere && 'key' in thingsHere && this.getKey() in inventory) {
                    this.movementType = MOVEMENT_TYPE_PARABOLIC;
                    let balloon = thingsHere['balloon'];
                    this.discard(true);
                    this.setMovement(balloon.x,balloon.y,500,undefined,undefined,true,true);
                }
                else {
                    return super.handleDblclick(e);
                }
            }
            extraPostMovementBehavior() {
                if ('balloon' in thingsHere) {
                    displayMessage('Pop!', DEFAULT_MESSAGE_DURATION);
                    thingsHere['balloon'].dispose();
                    if ('key' in thingsHere) {
                        let key = thingsHere['key'];
                        key.movementType = MOVEMENT_TYPE_PARABOLIC;
                        key.setMovement(key.x, 87 * yScaleFactor, 500);
                    }
                    this.setMovement(this.x + 80, 80 * yScaleFactor,600,undefined,undefined,true,true);
                }
            }
        }

        window.Hoard = class Hoard extends Thing {
        }

        window.Key = class Key extends Thing {
            handleDblclick(e) {
                if (this.y < 200) {
                    displayMessage('You cannot reach this!', DEFAULT_MESSAGE_DURATION);
                }
                else if (this.getKey() in inventory && 'portcullis' in thingsHere) {
                    let gate = thingsHere['portcullis'];
                    gate.dispose(true);
                }
                else {
                    return super.handleDblclick(e);
                }
            }
        }

        window.Oar = class Oar extends Thing {
        }

        window.Portcullis = class Portcullis extends Thing {
        }

        window.Tap = class Tap extends Thing {
        }

        window.Trap = class Trap extends Thing {
            extraTransformFromBehavior() {
                level.boarInTrap = false;
                if ('boar' in thingsHere) {
                    thingsHere['boar'].moveLeft();
                    if (typeof thingsHere['boar'].captionDiv !== 'undefined') {
                        thingsHere['boar'].captionDiv.style.display = 'none'; // don't display caption while running
                    }
                }
            }
            extraTransformIntoBehavior() {
                this.initialX = 50 * xScaleFactor;
                this.x = this.initialX;
            }
        }

        window.Treasure = class Treasure extends Thing {
        }

    }

    level.getThing = function(word,room,x,y,isonymIndex) {
        switch (word) {
            case 'ape' : return new Ape(word,room,x,y,isonymIndex);
            case 'balloon' : return new Balloon(word,room,x,y,isonymIndex);
            case 'boa' : return new Boa(word,room,x,y,isonymIndex);
            case 'boar' : return new Boar(word,room,x,y,isonymIndex);
            case 'board' : return new Board(word,room,x,y,isonymIndex);
            case 'boat' : return new Boat(word,room,x,y,isonymIndex);
            case 'dart' : return new Dart(word,room,x,y,isonymIndex);
            case 'hoard' : return new Hoard(word,room,x,y,isonymIndex);
            case 'key' : return new Key(word,room,x,y,isonymIndex);
            case 'oar' : return new Oar(word,room,x,y,isonymIndex);
            case 'portcullis' : return new Portcullis(word,room,x,y,isonymIndex);
            case 'tap' : return new Tap(word,room,x,y,isonymIndex);
            case 'trap' : return new Trap(word,room,x,y,isonymIndex);
            case 'treasure' : return new Treasure(word,room,x,y,isonymIndex);
            default : return undefined; // this will cause instantiation of plain-vanilla Thing.
        }
    }
    level.initialRoom = 'room1';
    level.initialX = 40; // expressed as % of way across x axis, i.e. value range is 0-100
    level.initialY = 75;
    level.initialSpells = [ 'add-edge', 'remove-edge', 'reversal' ];
    level.initialInventory = {};
    level.backgroundMusicFile = 'FoamRubber-320bit.mp3';
    level.allWords = [ 'ape','art','balloon','boa','boar','board','boat','dart','hart','hoar','hoard','key','oar','oat','oath','part','party','pond','portcullis','rat','tap','tape','tar','tarp','tart','trap','treasure' ];
    level.initialThings = [ ['oath','room1',65,81],['party','room2',50,81],['board','room3',94,62],['pond','room4',81,68],['key','room5',60,22],['balloon','room5',60,9],['portcullis','room5',81,68],['ape','room6',81,68],['treasure','room7',40,81] ];
    level.targetThing = 'treasure';
    level.immovableObjects = ['ape','balloon','boar','board','boat','hart','hoar','party','pond','portcullis','tar','trap',];
    level.bonusWords = [];
    level.plurals = {};
    level.initialRunes = [];
    level.sounds = {};
    level.additionalImageNamesToPreload = [];

    level.boarInTrap = false;

    level.rooms = {
        'room1': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room2', 10, 77, true, 23, 77)],
        },
        'room2': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room3', 10, 77, true, 70, 77),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room1', 90, 77, true, 75, 77)],
        },
        'room3': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 85, 'room4', 10, 77, true, 50, 77, 'board', PASSAGE_STATE_BLOCKED, 80, 77),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room2', 90, 77, true, 75, 77)],
        },
        'room4': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               // new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room5', 10, 77, true, 50, 77, 'pond', PASSAGE_STATE_BLOCKED, 73, 77),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room3', 90, 77, true, 75, 77)],
        },
        'room5': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room6', 10, 77, true, 50, 77, 'portcullis', PASSAGE_STATE_BLOCKED, 73, 77),
               // new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room4', 90, 77, true, 75, 77)
            ],
        },
        'room6': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room7', 10, 77, true, 50, 77, 'ape', PASSAGE_STATE_BLOCKED, 73, 77),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room5', 90, 77, true, 75, 77)],
        },
        'room7': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room6', 90, 77, true, 75, 77)],
        },
    };
    return level;
}