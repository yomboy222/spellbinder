/* ghost-peak.js */

/* code generated by command: python3 create_level.py "name=ghost-peak" "initialSpells=add-edge,remove-edge" "targetThing=grail" "room=name:room1,things:ghost,exits:E/room2/ghost" "room=name:room2,things:peak,exits:E/room3/peak W/room1" "room=name:room3,things:rail,exits:W/room2" */

levelList.push( { name:'ghost-peak', difficulty:1 } );

getLevelFunctions['ghost-peak'] = function() {

    let level = new Level('ghost-peak');
    level.folderName = 'ghost-peak';

    level.defineThingSubclasses = function() {

        window.Ghost = class Ghost extends Thing {
            update() {
                this.y = 12 * Math.sin(((Date.now() - this.timeOfCreation) / 300) ) + this.initialY;
                super.update();
            }
            passageBlockingBehavior() {
                displayMessage("Blocked! You'll need to transform the ghost in order to proceed.");
            }
        }

        window.Grail = class Grail extends Thing {
            extraTransformIntoBehavior() {
                displayMessage('Double-click to pick up!');
            }
        }

        window.Host = class Host extends Thing {
            constructor(word, room, x, y) {
                super(word, room, x, y);
                level.sounds['host-speech'].play();
                this.deleteAfterMovement = true; // so if player leaves room before speech is over, this will still get deleted.
                this.movementDurationMS = 5000 + 3000;
                this.beginMovementTime = Date.now();
                this.destX = this.initialX;
                this.destY = this.initialY;
            }
            draw() {
                let t = Date.now() - this.timeOfCreation;
                if (t < 5000) {
                    return super.draw();
                }
                if (t >= 5000 + 3000) {
                    delete thingsHere['host'];
                    return;
                }

                let fractionOfTheWayToEnd = (t - 5000) / 3001;
                let fractionSquared = fractionOfTheWayToEnd * fractionOfTheWayToEnd;
                ctx.globalAlpha = 1.0 - fractionSquared;
                let newX = (fractionOfTheWayToEnd * 100) * (Math.sin(fractionSquared * 25)) + (this.initialX - this.halfWidth);
                let newY = (fractionOfTheWayToEnd * 100) * (Math.cos(fractionSquared * 25)) + (this.initialY - this.halfHeight);
                ctx.drawImage(this.image, newX, newY, this.width, this.height);
                ctx.globalAlpha = 1.0;
            }
        }

        window.Pea = class Pea extends Thing {
            constructor(word,room,x,y) {
                super(word,room,x,y);
                this.wordDisplayOffsetY = 22;
            }
            extraTransformIntoBehavior() {
                this.y += 80;
            }
        }

        window.Peak = class Peak extends Thing {
            passageBlockingBehavior() {
                displayMessage("It's too steep!");
            }
        }

        window.Rail = class Rail extends Thing {
        }

    }

    level.getThing = function(word,room,x,y) {
        switch (word) {
            case 'ghost' : return new Ghost(word,room,x,y);
            case 'host' : return new Host(word,room,x,y);
            case 'grail' : return new Grail(word,room,x,y);
            case 'pea' : return new Pea(word,room,x,y);
            case 'peak' : return new Peak(word,room,x,y);
            case 'rail' : return new Rail(word,room,x,y);
            default : return undefined; // this will cause instantiation of plain-vanilla Thing.
        }
    }
    level.initialRoom = 'room1';
    level.initialX = 55; // expressed as % of way across x axis, i.e. value range is 0-100 
    level.initialY = 75;
    level.initialSpells = [ 'add-edge', 'remove-edge' ];
    level.initialInventory = {};
    level.backgroundMusicFile = undefined;
    level.allWords = [ 'ghost','grail','host','pea','peak','rail' ];
    level.initialThings = [ ['ghost','room1',81,68],['peak','room2',60,68],['rail','room3',60,81] ];
    level.targetThing = 'grail';
    level.immovableObjects = [ 'ghost','host','peak','rail'];
    level.initialRunes = [];
    level.sounds = {
        'host-speech' : new Audio(getLevelPathFromFolderName(level.folderName) + '/audio/host-speech.m4a')
    };
    level.initialMessage = 'Find and pick up a holy artifact!';

    level.rooms = {
        'room1': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room2', 10, 77, true, 30, 77, 'ghost', PASSAGE_STATE_BLOCKED, 73, 77)],
        },
        'room2': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room3', 10, 77, true, 38, 77, 'peak', PASSAGE_STATE_BLOCKED, 43, 65),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room1', 90, 77, true, 64, 77)],
        },
        'room3': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room2', 90, 77, true, 50, 77)],
        },
    };
    return level;
}