/* goon-hut.js */

/* code generated by command: python3 create_level.py "name=goon-hut" "initialSpells=reversal,change-letter" "initialRunes=v,w" "targetThing=treasure" "room=name:room1,things:hut goon portcullis,exits:W/room0/goon E/room2/portcullis" "room=name:room0,things:loot oxen,exits:E/room1" "room=name:room2,things:tang shifter,exits:W/room1 E/room3/shifter" "room=name:room3,things:soiree treasure,exits:W/room2" */

levelList.push( { name:'goon-hut', difficulty:0 } );

getLevelFunctions['goon-hut'] = function() {

    let level = new Level('goon-hut');
    level.folderName = 'goon-hut';

    level.defineThingSubclasses = function() { 

        window.Goal = class Goal extends Thing {
        }

        window.Goat = class Goat extends Thing {
        }

        window.Goon = class Goon extends Thing {
        }

        window.Gown = class Gown extends Thing {
            extraTransformIntoBehavior() {
                // when goon changes into gown, display it as goon *wearing* gown, looking down at himself, then running away
                startSuppressingPlayerInput();
                window.setTimeout(this.runAway.bind(this),2000);
            }
            runAway() {
                this.setMovement(0,this.y,1500,undefined,undefined,true, true);
                this.useAnimationImages = true;
                this.deleteAfterMovement = true;
                this.initiateMovement();
            }
        }

        window.Hut = class Hut extends Thing {
        }

        window.Lout = class Lout extends Thing {
        }

        window.Oven = class Oven extends Thing {
        }

        window.Portcullis = class Portcullis extends Thing {
            okayToDisplayWord() {
                return false;
            }
        }

        window.Shifter = class Shifter extends Thing {
            constructor(word,room,x,y) {
                super(word,room,x,y);
                this.reblocksPassageUponReturn = true;
                this.frameDisplayTimeMS = 1300;
                window.setTimeout(this.startAnimating.bind(this), 1200);
            }
        }

        window.Soiree = class Soiree extends Thing {
            constructor(word,room,x,y) {
                super(word,room,x,y);
                //this.useAnimationImages = true;
                //this.frameDisplayTimeMS = 1000;
            }
            passageBlockingBehavior() {
                displayMessageWithSound('Black tie only!',sounds['failure'], DEFAULT_MESSAGE_DURATION);
                this.useAnimationImages = true;
                window.setTimeout(this.stopAnimating.bind(this), DEFAULT_MESSAGE_DURATION);
            }
            okayToDisplayWord() {
                return false;
            }
        }

        window.Tool = class Tool extends Thing {
            handleDblclick(e) {
                if ('portcullis' in thingsHere && 'tool' in inventory) {
                    let portcullis = thingsHere['portcullis'];
                    this.removeFromInventoryForUseOnScreen();
                    this.setMovement(portcullis.x, portcullis.y, 1000, player.x, player.y, true);
                    this.extraPostMovementBehavior = function() {
                        level.sounds['unlock'].play();
                        window.setTimeout(this.concludeUse.bind(this), 2000);
                    };
                    this.initiateMovement();
                }
                else {
                    return super.handleDblclick(e);
                }
            }
            concludeUse() {
                thingsHere['portcullis'].unblockPassagesThisHadBeenBlocking();
                this.returnToInventoryAfterUseOnScreen();
                normalPlayerInputSuppressed = false;
            }
        }

        window.Treasure = class Treasure extends Thing {
        }

        window.Tux = class Tux extends Thing {
            extraPickUpBehavior() {
                // need to change player images.
                level.setOrUnsetSoireeObstacle();
            }
            extraDiscardBehavior() {
                // need to change player images.
                level.setOrUnsetSoireeObstacle();
            }
        }

        window.Wool = class Wool extends Thing {
        }

    }

    level.getThing = function(word,room,x,y) {
        switch (word) {
            case 'goal' : return new Goal(word,room,x,y);
            case 'goat' : return new Goat(word,room,x,y);
            case 'goon' : return new Goon(word,room,x,y);
            case 'gown' : return new Gown(word,room,x,y);
            case 'hut' : return new Hut(word,room,x,y);
            case 'lout' : return new Lout(word,room,x,y);
            case 'oven' : return new Oven(word,room,x,y);
            case 'portcullis' : return new Portcullis(word,room,x,y);
            case 'shifter' : return new Shifter(word,room,x,y);
            case 'soiree' : return new Soiree(word,room,x,y);
            case 'tool' : return new Tool(word,room,x,y);
            case 'treasure' : return new Treasure(word,room,x,y);
            case 'tux' : return new Tux(word,room,x,y);
            case 'wool' : return new Wool(word,room,x,y);
            default : return undefined; // this will cause instantiation of plain-vanilla Thing.
        }
    }
    level.initialRoom = 'room2';
    level.initialX = 55; // expressed as % of way across x axis, i.e. value range is 0-100 
    level.initialY = 75;
    level.initialSpells = [ 'reversal', 'change-letter' ];
    level.initialInventory = {};
    level.backgroundMusicFile = undefined;
    level.allWords = [ 'gang','gnat','goal','goat','gong','goon','gown','gut','hat','hut','loon','loot','lout','nut','oat','oven','oxen','portcullis','shifter','snifter','soiree','tang','tool','toon','town','treasure','tug','tun','tux','vat','wool' ];
    level.bonusWords = [ 'gang','goal','gong','gut','hat','loon','lout','oat','toon','town','tug','vat','wool' ];
    level.initialThings = [  ['tux','room3',30,60],  ['hut','room1',40,81],['goon','room1',18,68],['portcullis','room1',81,68],['loot','room0',18,81],['oxen','room0',55,81],['tang','room2',40,81],['shifter','room2',81,68],['soiree','room3',47,81],['treasure','room3',91,81] ];
    level.targetThing = 'treasure';
    level.immovableObjects = [ 'gang','gnat','goal','goat','gong','goon','hut','lout','oven','oxen','portcullis','shifter','soiree','town','tug','tun','vat' ];
    level.initialRunes = ['v','w'];
    level.sounds = {
        'unlock': new Audio(getLevelPathFromFolderName(level.folderName) + '/audio/410983__mihirfreesound__unlocking-door.wav'),
    };
    level.setOrUnsetSoireeObstacle = function() {
        if (currentRoom != 'room3' || !('soiree' in thingsHere) )
            return;
        let soiree = thingsHere['soiree'];
        if ('tux' in inventory) {
            console.log('here');
            soiree.activateOrDeactivateObstacle(false);
        }
        else {
            console.log('here2');
            soiree.activateOrDeactivateObstacle(true);
        }
    }

    level.rooms = {
        'room1': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room0', 90, 77, true, 80, 77, 'goon', PASSAGE_STATE_BLOCKED, 26, 63),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room2', 10, 77, true, 50, 77, 'portcullis', PASSAGE_STATE_BLOCKED, 73, 63)],
        },
        'room0': {
            boundaries: [],
            filledPolygons: [],
            passages: [
                new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',37, 77, 'room0', 40, 77, true, -1, -1, 'oxen', PASSAGE_STATE_BLOCKED, 70, 75),
                new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room1', 10, 77, true, 65, 77)],
        },
        'room2': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room1', 90, 77, true, 50, 77),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room3', 10, 77, true, 20, 77, 'shifter', PASSAGE_STATE_BLOCKED, 73, 63)],
        },
        'room3': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room2', 90, 77, true, 50, 77),
                new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',75, 77, 'room3', 75, 77, true, -1, -1, 'soiree', PASSAGE_STATE_BLOCKED, 35, 75),
            ],
            specificNewRoomBehavior: function() {
                level.setOrUnsetSoireeObstacle();
            },
        },
    };
    return level;
}