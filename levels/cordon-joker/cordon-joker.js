/* cordon-joker.js */

/* code generated by command: python3 create_level.py "name=cordon-joker" "initialSpells=anagram,remove-edge,change-letter" "targetThing=rock" "room=name:room1,things:cordon,exits:E/room2/cordon" "room=name:room2,things:joker,exits:W/room1" */

levelList.push( { name:'cordon-joker', difficulty:0 } );

getLevelFunctions['cordon-joker'] = function() {

    let level = new Level('cordon-joker');
    level.levelPath = 'cordon-joker';

    level.defineThingSubclasses = function() { 

        window.Condor = class Condor extends Thing {
        }

        window.Cordon = class Cordon extends Thing {
        }

        window.Cork = class Cork extends Thing {
        }

        window.Joke = class Joke extends Thing {
        }

        window.Roc = class Roc extends Thing {
        }

    }

    level.getThing = function(word,room,x,y) {
        switch (word) {
            case 'condor' : return new Condor(word,room,x,y);
            case 'cordon' : return new Cordon(word,room,x,y);
            case 'cork' : return new Cork(word,room,x,y);
            case 'joke' : return new Joke(word,room,x,y);
            case 'roc' : return new Roc(word,room,x,y);
            default : return undefined; // this will cause instantiation of plain-vanilla Thing.
        }
    }
    level.initialRoom = 'room1';
    level.initialX = 50; // expressed as % of way across x axis, i.e. value range is 0-100 
    level.initialY = 55;
    level.initialSpells = [ 'anagram', 'remove-edge', 'change-letter' ];
    level.initialInventory = {};
    level.backgroundMusicFile = undefined;
    level.allWords = [ 'codon','coke','condo','condor','cordon','core','cork','donor','jock','joke','joker','ore','roc','rock','roe','rondo' ];
    level.initialThings = [ ['cordon','room1',81,50],['joker','room2',40,65] ];
    level.targetThing = 'rock';
    level.initialRunes = [];

    level.rooms = {
        'room1': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 50, 'room2', 10, 50, true, 50, 50, 'cordon', PASSAGE_STATE_BLOCKED, 73, 50)],
        },
        'room2': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 50, 'room1', 90, 50, true, 50, 50)],
        },
    };
    return level;
}