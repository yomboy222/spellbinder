/* hemp-icon.js */

/* code generated by command: python3 create_level.py "name=hemp-icon" "initialSpells=anagram,add-edge,remove-edge,change-edge" "targetThing=treasure" "room=name:room1,things:beefeater hemp icon,exits:W/room0/beefeater E/room2" "room=name:room2,things:muffin kepi,exits:W/room1 E/room3" "room=name:room3,things:boule ruin,exits:W/room2 E/room4/ruin" "room=name:room4,things:treasure,exits:W/room3" "room=name:room0,things:cascara,exits:E/room1" */

levelList.push( { name:'hemp-icon', difficulty:0 } );

getLevelFunctions['hemp-icon'] = function() {

    let level = new Level('hemp-icon');
    level.levelPath = 'hemp-icon';

    level.defineThingSubclasses = function() { 

        window.Bruin = class Bruin extends Thing {
            extraTransformIntoBehavior() {
                passages[1].obstacle = 'bruin';
                passages[1].state = PASSAGE_STATE_BLOCKED;
            }

            passageBlockingBehavior() {
                displayMessage("Grrrr!", DEFAULT_MESSAGE_DURATION);
                level.sounds['growl'].play();
            }
        }

        window.Coin = class Coin extends Thing {
            handleDblclick(e) {
                if (this.movable === false) {
                    return; // if it's not movable it's because it's on its way to the machine, so ignore any further clicks.
                }
                if ('vendingmachine' in thingsHere && 'coin' in inventory) {
                    let vendingMachine = thingsHere['vendingmachine'];
                    thingsHere['coin'] = this;
                    this.deleteCaptionIfAny();
                    this.removeFromInventory();
                    this.movable = false; // so player can't pick up again as it moves into toll machine
                    this.movementType = MOVEMENT_TYPE_PARABOLIC;
                    this.beginMovementTime = Date.now();
                    this.movementDurationMS = 1000;
                    this.initialX = player.x;
                    this.initialY = player.y;
                    this.destX = vendingMachine.x;
                    this.destY = vendingMachine.y;
                }
                else {
                    return super.handleDblclick(e);
                }
            }

            methodToCallAfterMovement() {
                let sound = new Audio(levelPath + '/audio/kaching.wav');
                sound.play();
                let muffin = thingsHere['muffin'];
                if (typeof muffin !== 'undefined' && muffin != null) {
                    muffin.inVendingMachine = false;
                    muffin.x += 50;
                }
                this.dispose()
            }
        }

        window.Coins = class Coins extends Thing {
        }

        window.Icon = class Icon extends Thing {
        }

        window.Icons = class Icons extends Thing {
        }

        window.Muffin = class Muffins extends Thing {
            constructor(word,room,x,y) {
                super(word,room,x,y);
                this.inVendingMachine = true;
            }
            handleDblclick(e) {
                if (this.inVendingMachine) {
                    displayMessage('Alas, the muffin is inside the vending machine.');
                    return true; // meaning we did handle it here.
                }
                else {
                    return this.handleDblclick(e);
                }
            }
        }

        window.Pike = class Pike extends Thing {
            handleDblclick(e) {
                if ('beefeater' in thingsHere && 'pike' in inventory) {
                    this.removeFromInventoryForUseOnScreen();
                    this.strokeNumber = 0;
                    this.startStroke();
                    startSuppressingPlayerInput(3000);

                }
                else {
                    return super.handleDblclick(e);
                }
            }
            startStroke() {
                this.strokeNumber++;
                let destX = player.x - 80; // - 70;
                let destY = player.y ; // + 4;
                let time = 110;
                if (this.strokeNumber % 2 == 1) {
                    destX = player.x;
                    time = 600;
                }
                this.setMovement(destX, destY, time);
                if (this.strokeNumber < 6)
                    this.methodToCallAfterMovement = this.startStroke;
                else
                    this.methodToCallAfterMovement = this.finishUse;

            }
            finishUse() {
                let beefeater = thingsHere['beefeater'];
                beefeater.dispose();
                this.tryToPickUp(true);
            }

        }

        window.Ruin = class Ruin extends Thing {
        }

        window.Ruins = class Ruins extends Thing {
        }

        window.Treasure = class Treasure extends Thing {
        }

        window.Treasures = class Treasures extends Thing {
        }

        window.VendingMachine = class VendingMachine extends Thing {
            okayToDisplayWord() {
                return false;
            }
        }

    }

    level.getThing = function(word,room,x,y) {
        switch (word) {
            case 'bruin' : return new Bruin(word,room,x,y);
            case 'coin' : return new Coin(word,room,x,y);
            case 'coins' : return new Coins(word,room,x,y);
            case 'icon' : return new Icon(word,room,x,y);
            case 'icons' : return new Icons(word,room,x,y);
            case 'muffin' : return new Muffin(word,room,x,y);
            case 'pike' : return new Pike(word,room,x,y);
            case 'ruin' : return new Ruin(word,room,x,y);
            case 'ruins' : return new Ruins(word,room,x,y);
            case 'treasure' : return new Treasure(word,room,x,y);
            case 'treasures' : return new Treasures(word,room,x,y);
            case 'vendingmachine' : return new VendingMachine(word,room,x,y);
            default : return undefined; // this will cause instantiation of plain-vanilla Thing.
        }
    }
    level.initialRoom = 'room1';
    level.initialX = 50; // expressed as % of way across x axis, i.e. value range is 0-100 
    level.initialY = 55;
    level.initialSpells = [ 'anagram', 'add-edge', 'remove-edge', 'change-edge' ];
    level.initialInventory = {};
    level.backgroundMusicFile = undefined;
    level.allWords = [ 'vendingmachine', 'beefeater','beefeaters','bike','blouse','boule','boules','bruin','burin','cascara','coin','coins','hem','hemp','hems','icon','icons','kepi','kepis','louse','maraca','maracas','marasca','mascara','mesh','mike','muffin','pike','pikes','puffin','puffins','ruin','ruins','spike','treasure','treasures' ];
    level.immovableObjects = [ 'vendingmachine', 'beefeater','beefeaters','bike','bruin','ruin','ruins' ];
    level.initialThings = [ ['cascara','room0',40,65],
        ['beefeater','room1',18,50],['hemp','room1',40,65],['icon','room1',60,65],
        ['vendingmachine','room2',40,69], ['muffin','room2',40,65],['kepi','room2',60,65],
        ['boule','room3',40,65],['ruin','room3',81,50],
        ['treasure','room4',40,65] ];
    level.targetThing = 'treasure';
    level.initialRunes = [];
    level.sounds = { 'growl' : new Audio('levels/' + level.levelPath + '/audio/345733__noahpardo__deep-growl-1.wav') };

    level.rooms = {
        'room1': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 50, 'room0', 90, 50, true, 50, 50, 'beefeater', PASSAGE_STATE_BLOCKED, 26, 50),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 50, 'room2', 10, 50, true, 50, 50)],
        },
        'room2': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 50, 'room1', 90, 50, true, 50, 50),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 50, 'room3', 10, 50, true, 50, 50)],
        },
        'room3': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 50, 'room2', 90, 50, true, 50, 50),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 50, 'room4', 10, 50, true, 50, 50, 'ruin', PASSAGE_STATE_BLOCKED, 73, 50)],
        },
        'room4': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 50, 'room3', 90, 50, true, 50, 50)],
        },
        'room0': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 50, 'room1', 10, 50, true, 50, 50)],
        },
    };
    return level;
}