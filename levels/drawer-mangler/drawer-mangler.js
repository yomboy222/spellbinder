/* drawer-mangler.js */

/* code generated by command: python3 create_level.py "name=drawer-mangler" "initialSpells=reversal,add-edge-nfs,remove-edge-nfs" "targetThing=treasure" "room=name:room1,things:drawer portcullis,exits:W/room0/portcullis E/room2" "room=name:room0,things:spa,exits:E/room1 S/crownRoom" "room=name:room2,things:mangler,exits:W/room1 E/room3/mangler" "room=name:room3,things:angler tributary,exits:W/room2 E/room4/tributary" "room=name:room4,things:bee,exits:E/room5/bee W/room3" "room=name:room5,things:reamer,exits:W/room4 E/room5/reamer" "room=name:crownRoom,things:crown,exits:N/room0" */

levelList.push( { name:'drawer-mangler', difficulty:7 } );

getLevelFunctions['drawer-mangler'] = function() {

    let level = new Level('drawer-mangler');
    level.folderName = 'drawer-mangler';

    level.defineThingSubclasses = function() {

        window.Angler = class Angler extends Thing {
            extraTransformIntoBehavior() {
                this.wordDisplayOffsetX = -40;
                this.wordDisplayOffsetY = -40;
                if (currentRoom === 'room2' && typeof this.hasWaitedAfterTransforming === 'undefined') {
                    this.hasWaitedAfterTransforming = false;
                    // wait just before moving out of room:
                    this.setMovement(this.x, this.y, 800, this.x, this.y, true, true);
                }
            }
            extraPostMovementBehavior() {
                if (this.hasWaitedAfterTransforming === false) {
                    this.setMovement(PLAY_AREA_WIDTH + 140, this.y, 1200, this.x, this.y, true, true);
                    this.hasWaitedAfterTransforming = true;
                }
                else {
                    this.deleteFromThingsHere();
                    this.room = 'room3';
                    this.x = 77 * xScaleFactor;
                    this.y = 56 * yScaleFactor;
                    thingsElsewhere[this.getKey()] = this;
                }
            }
            handleDblclick(e) {
                if (currentRoom === 'room3') {
                    displayMessage('The angler says, "We need something to bridge the water!"');
                }
                else {
                    return super.handleDblclick(e);
                }
            }
        }

        window.Bee = class Bee extends Thing {
            constructor(word,room,x,y) {
                super(word,room,x,y);
                this.startAnimating();
            }
            extraTransformFromBehavior() {
                this.x = this.initialX;
                this.y = this.initialY;
            }
            update() {
                super.update();
                let t1 = Math.round((Date.now() % 1000) * NUMBER_OF_FRAMES_IN_PASSAGE_ARROW_CYCLE / 1000);
                let t2 = Math.round((Date.now() % 380) * NUMBER_OF_FRAMES_IN_PASSAGE_ARROW_CYCLE / 380);
                this.x = this.initialX + (80 * arrowsAlphaLookupTable[t2]) - 40;
                this.y = this.initialY + (200 * arrowsAlphaLookupTable[t1]) - 150;
            }
            passageBlockingBehavior() {
                displayMessage('Yikes!',DEFAULT_MESSAGE_DURATION);
            }
        }

        window.Beer = class Beer extends Thing {
        }

        window.BoxBottom = class BoxBottom extends Thing {
            okayToDisplayWord() {
                return false;
            }
            getBaseY() {
                return -999;  // force back in z-order
            }
        }
        window.BoxTop = class BoxTop extends Thing {
            okayToDisplayWord() {
                return false;
            }
            getBaseY() {
                return 350;  // force in front of drawer in z-order
            }
        }

        window.Crown = class Crown extends Thing {
        }

        window.Drawer = class Drawer extends Thing {
            handleDblclick(e) {
                if (this.hasBeenTransformedAtLeastOnce) { // if it was transformed from reward, no more opening/closing movement.
                    return super.handleDblclick(e);
                }
                else if (typeof this.drawerOpen !== 'boolean' || this.drawerOpen === false) {
                    this.setMovement(this.x+16, this.y+16, 1000, undefined, undefined, true, true);
                    this.drawerOpen = true;
                    if (!level.noteHasBeenCreated) {
                        let note = level.getNote();
                        note.setMovement(this.x+16, this.y+125, 1000, undefined, undefined, true, true);
                    }
                }
                else {
                    this.drawerOpen = false;
                    this.setMovement(this.x-16, this.y-16, 1000, undefined, undefined, true, true);
                }
                return true; // meaning click was handled
            }
            getBaseY() {
                return 340;
            }
        }

        window.Mangler = class Mangler extends Thing {
        }

        window.Maps = class Maps extends Thing {
            constructor(word,room,x,y) {
                super(word,room,x,y);
                this.inventoryImageRatio = 3; // to make smaller in inventory
            }
            extraDiscardBehavior() {
                // to ensure it's legible, put in middle of screen:
                this.initialX = CANVAS_WIDTH / 2;
                this.initialY = 75 * yScaleFactor;
                this.x = this.initialX;
                this.y = this.initialY;
            }
        }

        window.Note = class Note extends Thing {
            constructor(word,room,x,y) {
                super(word,room,x,y);
                //this.wordDisplayOffsetY = -20;
            }
        }

        window.Pan = class Pan extends Thing {
        }

        window.Portcullis = class Portcullis extends Thing {
            openPortcullis() {
                this.setMovement(this.x - 90, this.y + 101, 1200);
                this.unblockPassagesThisHadBeenBlocking();
            }
            getBaseY() {
                return 999;
            }
            okayToDisplayWord() {
                return false;
            }
        }

        window.Reamer = class Reamer extends Thing {
            constructor(word,room,x,y) {
                super(word,room,x,y);
                this.frameDisplayTimeMS = 175;
                this.moveUpAndDown = true;
                this.startAnimating();
            }
            extraTransformFromBehavior() {
                this.x = this.initialX;
                this.y = this.initialY;
            }
            extraTransformIntoBehavior() {
                this.stopAnimating(); // if you transform it back it shouldn't start moving again.
            }
            update() {
                super.update();
                if (!this.hasBeenTransformedAtLeastOnce) {
                    let t1 = Math.round((Date.now() % 1000) * NUMBER_OF_FRAMES_IN_PASSAGE_ARROW_CYCLE / 1000);
                    this.y = this.initialY + (320 * arrowsAlphaLookupTable[t1]) - 250;
                }
            }
            passageBlockingBehavior() {
                displayMessage('Yikes!',DEFAULT_MESSAGE_DURATION);
            }
        }

        window.ReamerTop = class ReamerTop extends Thing {
            getBaseY() {
                return 999;
            }
            okayToDisplayWord() {
                return false;
            }
        }

        window.Reward = class Reward extends Thing {
            extraTransformIntoBehavior() {
                if (!level.drawerHasBeenTransformed) {
                    this.movementType = MOVEMENT_TYPE_PARABOLIC;
                    this.setMovement(this.x + 30, this.y + 110, 1100);
                }
                if (!level.noteHasBeenCreated) {
                    level.noteHasBeenCreated = true;
                    let note = level.getNote();
                    note.setMovement(this.x -30, this.y + 125, 1000, undefined, undefined, true, true);
                }
                level.drawerHasBeenTransformed = true;
            }
            getBaseY() {
                return 99999; // force in front of drawer chest
            }

            handleDblclick(e) {
                if (currentRoom === 'room1' && 'coin-machine' in thingsHere && 'reward' in inventory) {
                    let tollMachine = thingsHere['coin-machine'];
                    this.removeFromInventoryForUseOnScreen();
                    this.movementType = MOVEMENT_TYPE_PARABOLIC;
                    this.setMovement(tollMachine.x + 8, tollMachine.y - 28, 1000, player.x, player.y, true, true);
                }
                else {
                    return super.handleDblclick(e);
                }
            }
            extraPostMovementBehavior() {
                if (level.rewardIsDoneBeingReleased) {
                    let portcullis = thingsHere['portcullis'];
                    portcullis.openPortcullis();
                    level.sounds['kaching'].play();
                    this.dispose();
                }
                else {
                    level.rewardIsDoneBeingReleased = true;
                }

            }
        }

        window.Safe = class Safe extends Thing {
            constructor(word, room, x, y) {
                super(word, room, x, y);
                if (typeof level['safeOpen'] === 'boolean' && level['safeOpen'] === true) {
                    this.image = this.images[0];
                    this.image.width = 187;
                    this.width = 187;
                    this.halfWidth = 94;
                }
            }
            okayToDisplayWord() {
                return false;
            }

            handleClick() {
                if (typeof level['safeOpen'] === 'boolean' && level['safeOpen'] === true) {
                    return super.handleDblclick();
                }
                else {
                    this.inputCombo();
                }
            }

            handleDblclick(e) {
                if (typeof level['safeOpen'] === 'boolean' && level['safeOpen'] === true) {
                    return super.handleDblclick();
                }
                else {
                    this.inputCombo();
                }
            }
            inputCombo() {
                let combo = window.prompt('Set dials to (0000-9999):');
                if (combo === '3821') {
                    level.safeOpen = true;
                    this.image = this.images[0];
                    let crown = getThing('crown',currentRoom,this.x, this.y, false);
                    crown.putIntoThingsHere();
                    crown.captionDiv = getNewCaptionDiv(crown.word, crown.getKey());
                    crown.setCaptionPositionInThingsHere();
                    level.sounds['kaching'].play();
                    crown.setMovement(this.x-145, this.y+25,700);
                }
                else {
                    displayMessage('Nothing happens.');
                    sounds['failure'].play();
                }
            }
        }

        window.Scrap = class Scrap extends Thing {
            extraPickUpBehavior() {
                this.image = this.images[0]; // change to un-crumpled version.
                this.width = this.image.width;
                this.height = this.image.height;
                this.halfWidth = this.width / 2;
                this.halfHeight = this.height / 2;
            }
        }

        window.Screamer = class Screamer extends Thing {
        }

        window.Spa = class Spa extends Thing {
            constructor(word, room, x, y) {
                super(word, room, x, y);
                this.numberOfBubbles = 10;
                this.bubbles = [];
                for (let i = 0; i < this.numberOfBubbles; i++) {
                    let bubble = this.getRandomBubbleData();
                    this.bubbles.push(bubble);
                }
            }

            getRandomBubbleData() {
                let offset = 0.8 * this.width * (Math.random() - 0.5);
                let bubbleX = this.x + offset;
                let bubbleY = this.y - this.halfHeight + 50;
                let timeToPop = Date.now() + 150 + (150 * Math.random());
                let radius = 2 + (4 * Math.random());
                let delta = 1.4 + (Math.random() * 0.8);
                return {'x': bubbleX, 'y': bubbleY, 'timeToPop': timeToPop, 'radius': radius, 'delta': delta};
            }

            update() {
                super.update();
                let now = Date.now();
                for (let i = 0; i < this.numberOfBubbles; i++) {
                    this.bubbles[i].y -= this.bubbles[i].delta;
                    if (now > this.bubbles[i].timeToPop) {
                        this.bubbles[i] = this.getRandomBubbleData();
                    }
                }
            }

            draw() {
                super.draw();
                ctx.strokeStyle = 'blue';
                ctx.lineWidth = 2;
                for (let i = 0; i < this.numberOfBubbles; i++) {
                    ctx.beginPath();
                    ctx.arc(this.bubbles[i].x, this.bubbles[i].y, this.bubbles[i].radius, 0, 2 * Math.PI);
                    ctx.stroke();
                }
            }
        }
        window.Span = class Span extends Thing {
            extraTransformIntoBehavior() {
                this.wordDisplayOffsetX = -65;
                if ('tributary' in thingsHere) {
                    let tributary = thingsHere['tributary'];
                    tributary.activateOrDeactivateObstacle(false);
                    this.initialX = tributary.x - 40;
                    this.initialY = 90 * yScaleFactor;
                    this.x = this.initialX;
                    this.y = this.initialY;
                }
            }
        }

        window.Spar = class Spar extends Thing {
        }

        window.TollMachine = class TollMachine extends Thing {
            okayToDisplayWord() {
                return false;
            }
            getBaseY() {
                return -999;
            }
        }

        window.Tributary = class Tributary extends Thing {
            constructor(word,room,x,y,isonymIndex) {
                super(word,room,x,y,isonymIndex);
                this.frameDisplayTimeMS = 200;
                this.startAnimating();
            }
            passageBlockingBehavior() {
                displayMessage('You need something to bridge the water!', 2 * DEFAULT_MESSAGE_DURATION);
            }
            okayToDisplayWord() {
                return false;
            }
        }

    }

    level.getThing = function(word,room,x,y,isonymIndex) {
        switch (word) {
            case 'angler' : return new Angler(word,room,x,y,isonymIndex);
            case 'bee' : return new Bee(word,room,x,y,isonymIndex);
            case 'beer' : return new Beer(word,room,x,y,isonymIndex);
            case 'box-bottom' : return new BoxBottom(word,room,x,y,isonymIndex);
            case 'box-top' : return new BoxTop(word,room,x,y,isonymIndex);
            case 'crown' : return new Crown(word,room,x,y,isonymIndex);
            case 'drawer' : return new Drawer(word,room,x,y,isonymIndex);
            case 'mangler' : return new Mangler(word,room,x,y,isonymIndex);
            case 'maps' : return new Maps(word,room,x,y,isonymIndex);
            case 'note' : return new Note(word,room,x,y,isonymIndex);
            case 'pan' : return new Pan(word,room,x,y,isonymIndex);
            case 'portcullis' : return new Portcullis(word,room,x,y,isonymIndex);
            case 'reamer' : return new Reamer(word,room,x,y,isonymIndex);
            case 'reamer-top' : return new ReamerTop(word,room,x,y,isonymIndex);
            case 'reward' : return new Reward(word,room,x,y,isonymIndex);
            case 'safe' : return new Safe(word,room,x,y,isonymIndex);
            case 'scrap' : return new Scrap(word,room,x,y,isonymIndex);
            case 'screamer' : return new Screamer(word,room,x,y,isonymIndex);
            case 'spa' : return new Spa(word,room,x,y,isonymIndex);
            case 'span' : return new Span(word,room,x,y,isonymIndex);
            case 'spar' : return new Spar(word,room,x,y,isonymIndex);
            case 'coin-machine' : return new TollMachine(word,room,x,y,isonymIndex);
            case 'tributary' : return new Tributary(word,room,x,y,isonymIndex);
            default : return undefined; // this will cause instantiation of plain-vanilla Thing.
        }
    }
    level.initialRoom = 'room1';
    level.initialX = 62; // expressed as % of way across x axis, i.e. value range is 0-100
    level.initialY = 75;
    level.initialSpells = [ 'reversal', 'add-edge-nfs', 'remove-edge-nfs' ];
    level.initialInventory = {};
    level.backgroundMusicFile = 'FoamRubber-320bit.mp3';
    level.allWords = [ 'angle','angler','bee','beer','creamer','crow','crown','drawer','mangler','maps','note','pan','portcullis','reamer','reward','row','safe','scrap','screamer','spa','spam','span','spar','treasure','tributary' ];
    level.initialThings = [ ['drawer','room1',79,64],['portcullis','room1',28,75],['coin-machine','room1',37,62],['box-top','room1',78,71],['box-bottom','room1',80,73],['spa','room0',40,81],['mangler','room2',71,68],['angler','room3',40,81],['tributary','room3',92,98],['bee','room4',40,76],['scrap','room4',82,80],['reamer','room5',38,60],['reamer-top','room5',38,18],['safe','crownRoom',70,81],['treasure','room5',88,80] ];
    level.targetThing = 'treasure';
    level.immovableObjects = ['angler','bee','box-top','box-bottom','drawer','mangler','portcullis','reamer','reamer-top','safe','screamer','spa','span','coin-machine','tributary',];
    level.bonusWords = ['pan','screamer','spar'];
    level.plurals = {};
    level.initialRunes = [];
    level.sounds = {
        'kaching' : new Audio(getLevelPathFromFolderName(level.folderName) + '/audio/kaching.wav'),
    };
    level.additionalImageNamesToPreload = ['bee_0','bee_1','safe_0','scrap_0','tributary_0', 'tributary_1', 'tributary_2', 'tributary_3','reamer_0','reamer_1','reamer_2'];
    level.safeOpen = false;
    level.drawerHasBeenTransformed = false;
    level.rewardIsDoneBeingReleased = false;
    level.goalDescription = 'Get the treasure!';
    level.noteHasBeenCreated = false;

    level.getNote = function() {
        let x = 79 * xScaleFactor;
        let y = 64 * yScaleFactor; // default coords; set to drawer coords if present:
        if ('drawer' in thingsHere) {
            let drawer = thingsHere['drawer'];
            x = drawer.x;
            y = drawer.y - 25;
        }
        level.noteHasBeenCreated = true;
        let note = getThing('note',currentRoom,x,y,false);
        note.putIntoThingsHere();
        note.captionDiv = getNewCaptionDiv(note.word, note.getKey()); // really need to put this into getThing!!
        note.setCaptionPositionInThingsHere();

        return note;
    }

    level.rooms = {
        'room1': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room0', 90, 77, true, 65, 77, 'portcullis', PASSAGE_STATE_BLOCKED, 31, 77),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room2', 10, 77, true, 30, 77)],
        },
        'room0': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room1', 10, 77, true, 50, 77),
                ]
        },
        'room2': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
                new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room1', 90, 77, true, 50, 77),
                new Passage(PassageTypes.INVISIBLE_VERTICAL, 'N',30, 46, 'crownRoom', 30, 88, true, 30, 75, undefined, PASSAGE_STATE_HIDDEN),
                new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room3', 10, 77, true, 50, 77, 'mangler', PASSAGE_STATE_BLOCKED, 63, 77)],
        },
        'room3': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room2', 90, 77, true, 30, 77),
                new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'N',50, 50, 'room4', 20, 90, true, 20, 77),
                new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room5', 5, 77, true, 20, 77, 'tributary', PASSAGE_STATE_BLOCKED, 73, 77)],
        },
        'room4': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'SW',15, 95, 'room3', 50, 44, true, 50, 77),
                new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',55, 77, 'room4', 55, 77, true, 55, 77, 'bee', PASSAGE_STATE_BLOCKED, 30, 77),
            ],
        },
        'room5': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room3', 90, 77, true, 50, 77),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',70, 77, 'room5', 70, 77, true, 70, 77, 'reamer', PASSAGE_STATE_BLOCKED, 30, 77)],
        },
        'crownRoom': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_VERTICAL, 'S',30, 95, 'room2', 30, 50, true, 30, 77)],
        },
    };
    return level;
}