/* spook-gel.js */

/* code generated by command: python3 create_level.py "name=spook-gel" "initialSpells=reversal,change-letter" "initialRunes=k" "targetThing=treasure" "room=name:room1,things:gel spook,exits:E/room2/spook" "room=name:room2,things:flash couch,exits:W/room1 E/room3/couch" "room=name:room3,things:treasure,exits:W/room2" */

levelList.push( { name:'spook-gel [new, missing some artwork]', difficulty:5 } );

getLevelFunctions['spook-gel [new, missing some artwork]'] = function() {

    let level = new Level('spook-gel');
    level.folderName = 'spook-gel';

    level.defineThingSubclasses = function() { 

        window.Couch = class Couch extends Thing {
            passageBlockingBehavior() {
                displayMessage('Too heavy to move away from the door!');
            }
            getCannotPickUpMessage() {
                if (currentRoom === 'room2')
                    return 'Too heavy to move away from the door!';
                else
                    return 'Too heavy to pick up!';
            }
        }

        window.Flash = class Flash extends Thing {
            constructor(word,room,x,y) {
                super(word,room,x,y);
                this.frameDisplayTimeMS = 50;
                this.startAnimating();
            }
        }

        window.Hooks = class Hooks extends Thing {
        }

        window.Keg = class Keg extends Thing {
        }

        window.Log = class Log extends Thing {
        }

        window.Loops = class Loops extends Thing {
        }

        window.Pouch = class Pouch extends Thing {
        }

        window.Spook = class Spook extends Thing {
            constructor(word,room,x,y) {
                super(word,room,x,y);
                this.reblocksPassageUponReturn = true;
            }
            passageBlockingBehavior() {
                displayMessage('Yikes!');
            }
            update() {
                this.y = 12 * Math.sin(((Date.now() - this.timeOfCreation) / 300) ) + this.initialY;
                super.update();
            }
            extraTransformFromBehavior() {
                this.y = this.initialY;
            }
        }

        window.Treasure = class Treasure extends Thing {
        }

    }

    level.getThing = function(word,room,x,y) {
        switch (word) {
            case 'couch' : return new Couch(word,room,x,y);
            case 'flash' : return new Flash(word,room,x,y);
            case 'hooks' : return new Hooks(word,room,x,y);
            case 'keg' : return new Keg(word,room,x,y);
            case 'log' : return new Log(word,room,x,y);
            case 'loops' : return new Loops(word,room,x,y);
            case 'pouch' : return new Pouch(word,room,x,y);
            case 'spook' : return new Spook(word,room,x,y);
            case 'treasure' : return new Treasure(word,room,x,y);
            default : return undefined; // this will cause instantiation of plain-vanilla Thing.
        }
    }
    level.initialRoom = 'room1';
    level.initialX = 40; // expressed as % of way across x axis, i.e. value range is 0-100
    level.initialY = 75;
    level.initialSpells = [ 'reversal', 'change-letter' ];
    level.initialInventory = {};
    level.backgroundMusicFile = 'Investigations Kevin MacLeod Gaming Background Music HD.mp3';
    level.allWords = [ 'cooks','couch','flack','flash','flask','gel','hocks','hooks','hoops','keg','leg','log','loops','peg','pooch','pouch','spook','spool','treasure' ];
    level.initialThings = [ ['gel','room1',52,81],['spook','room1',81,70],['flash','room2',40,81],['couch','room2',79,75],['treasure','room3',40,81] ];
    level.targetThing = 'treasure';
    level.immovableObjects = [ 'cooks','couch','flack','spook' ];
    level.bonusWords = [ 'cooks','flack','hocks','log','peg','pooch' ];
    level.initialRunes = ['k'];
    level.sounds = {};
    level.additionalImageNamesToPreload = ['flash_0','flash_1','flash_2','flash_3','flash_4','flash_5','flash_6',];
    level.goalDescription = 'Get the treasure!';

    level.rooms = {
        'room1': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room2', 10, 77, true, 50, 77, 'spook', PASSAGE_STATE_BLOCKED, 73, 77)],
        },
        'room2': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room1', 90, 77, true, 50, 77),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room3', 10, 77, true, 50, 77, 'couch', PASSAGE_STATE_BLOCKED, 73, 77)],
        },
        'room3': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room2', 90, 77, true, 50, 77)],
        },
    };
    return level;
}