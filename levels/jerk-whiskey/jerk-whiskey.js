/* jerk-whiskey.js */

/* code generated by command: python3 create_level.py "name=jerk-whiskey" "initialSpells=add-letter-nfs,remove-letter-nfs,change-letter-nfs" "targetThing=rubies" "room=name:room1,things:whiskey jerk croquette,exits:N/room2/jerk" "room=name:room2,things:drake,exits:W/room3 E/room5 S/room1" "room=name:room3,things:tollhouse,exits:W/room4/tollhouse E/room2" "room=name:room4,things:swami,exits:E/room3" "room=name:room5,things:leopard,exits:W/room2 E/room6/leopard" "room=name:room6,things:rubes,exits:W/room5" */

levelList.push( { name:'jerk-whiskeys [new, missing some artwork]', difficulty:5 } );

getLevelFunctions['jerk-whiskeys [new, missing some artwork]'] = function() {

    let level = new Level('jerk-whiskey');
    level.folderName = 'jerk-whiskey';

    level.defineThingSubclasses = function() { 

        window.Coquette = class Coquette extends Thing {
            extraTransformIntoBehavior() {
                this.frameDisplayTimeMS = 280;
                this.startAnimating();
                if ('jerk' in thingsHere) {
                    window.setTimeout(level.moveJerk,1200);
                }
            }
        }

        window.Jerk = class Jerk extends Thing {
            constructor(word,room,x,y) {
                super(word,room,x,y);
                this.reblocksPassageUponReturn = true;
            }
            passageBlockingBehavior() {
                displayMessage('Blocked!', DEFAULT_MESSAGE_DURATION);
                level.sounds['get_lost'].play()
            }
            extraTransformFromBehavior() {
                if ('whiskers' in thingsHere)
                    thingsHere['whiskers'].dispose();
            }
            extraTransformIntoBehavior() {
                // if player turns jerky back into jerk, use the jerk_2 image (neither whiskey nor whiskers in it) which will be pre-loaded.
                // this.currentAnimationIndex = 2;
                // this.frameDisplayTimeMS = 0; // meaning don't increment
                // this.startAnimating();
                for (let i=0; i<additionalImagesToPreLoad.length; i++) {
                    if (additionalImagesToPreLoad[i].src.indexOf('jerk_2') >= 0) {
                        this.image = additionalImagesToPreLoad[i];
                        console.log('found it');
                        break;
                    }
                }
            }
        }

        window.Leopard = class Leopard extends Thing {
        }

        window.Rake = class Rake extends Thing {
            extraTransformIntoBehavior() {
                displayMessage('Remember that to use an item, you double-click on it when it is in your inventory!');
            }

            handleDblclick(e) {
                if (('detritus' in thingsHere) && ('rake' in inventory)) {
                    this.clearDetritus();
                    return true;
                } else {
                    return super.handleDblclick(e);
                }
            }
            clearDetritus() {
                startSuppressingPlayerInput();
                this.strokeNumber = 0;
                this.removeFromInventoryForUseOnScreen();
                let target = thingsHere['detritus']; // obviously need to have checked beforehand that this is here.
                this.x =  target.x ;
                this.y = target.y - 60;
                this.startStroke();
            }

            startStroke() {
                this.strokeNumber++;
                let destX = this.x ; // - 70;
                let destY = this.y ; // + 4;
                let time = 110;
                if (this.strokeNumber % 2 == 1) {
                    destX = this.x ; // + 70;
                    destY = this.y ; // + 13;
                    time = 600;
                }
                this.setMovement(destX, destY, time);
                if (this.strokeNumber < 8) {
                    this.extraPostMovementBehavior = this.startStroke.bind(this);
                }
                else {
                    this.extraPostMovementBehavior = this.finishClearingDetritus.bind(this);
                }
            }

            draw() {
                let rotation = 0;
                if (this.beginMovementTime > 0) {
                    rotation = (((Date.now() - this.beginMovementTime) / this.movementDurationMS) * Math.PI / 2 ) - 2.0; // (Math.PI/2);
                    if (this.strokeNumber % 2 == 1) {
                        rotation = -rotation - (Math.PI / 2);
                    }

                }
                // console.log(rotation);
                if (this.beginMovementTime > 0) {
                    ctx.setTransform(1, 0, 0, 1, this.x + 10, this.y + 30);
                    ctx.rotate(rotation);
                    ctx.drawImage(this.image, 0-this.halfWidth, 20-this.halfHeight, this.width, this.height);
                    ctx.rotate(0-rotation);
                    ctx.setTransform(1,0,0,1,0,0);
                }
                else
                    ctx.drawImage(this.image, this.x - this.halfWidth, this.y - this.halfHeight, this.width, this.height);
            }

            finishClearingDetritus() {
                this.returnToInventoryAfterUseOnScreen();
                stopSuppressingPlayerInput();
                thingsHere['detritus'].dispose();
            }
        }

        window.Swami = class Swami extends Thing {
        }

        window.Swamp = class Swamp extends Thing {
        }

        window.Tollhouse = class Tollhouse extends Thing {
        }

        window.Tubes = class Tubes extends Thing {
        }

        window.Whiskers = class Whiskers extends Thing {
            extraTransformIntoBehavior() {
                if ('jerk' in thingsHere) {
                    thingsHere['jerk'].image = thingsHere['jerk'].images[1];
                    level.sounds['what_the'].play();
                }
            }
        }

        window.Whiskeys = class Whiskeys extends Thing {
            getCannotPickUpMessage() {
                level.sounds['whiskeys'].play();
                return "Hey, don't touch my whiskeys!";
            }
        }

    }

    level.getThing = function(word,room,x,y) {
        switch (word) {
            case 'coquette' : return new Coquette(word,room,x,y);
            case 'jerk' : return new Jerk(word,room,x,y);
            case 'leopard' : return new Leopard(word,room,x,y);
            case 'rake' : return new Rake(word,room,x,y);
            case 'swami' : return new Swami(word,room,x,y);
            case 'swamp' : return new Swamp(word,room,x,y);
            case 'tollhouse' : return new Tollhouse(word,room,x,y);
            case 'tubes' : return new Tubes(word,room,x,y);
            case 'whiskers' : return new Whiskers(word,room,x,y);
            case 'whiskeys' : return new Whiskeys(word,room,x,y);
            default : return undefined; // this will cause instantiation of plain-vanilla Thing.
        }
    }

    level.moveJerk = function() {
        if ('jerk' in thingsHere) {
            let jerk = thingsHere['jerk'];
            jerk.image = jerk.images[0];
            level.sounds['hey_baby'].play();
            if ('whiskeys' in thingsHere) {
                thingsHere['whiskeys'].x = jerk.x + 50;
                thingsHere['whiskeys'].setCaptionPositionInThingsHere();
            }
        }
    }
    level.initialRoom = 'room1';
    level.initialX = 28; // expressed as % of way across x axis, i.e. value range is 0-100
    level.initialY = 75;
    level.initialSpells = [ 'add-letter-nfs', 'remove-letter-nfs', 'change-letter-nfs' ];
    level.initialInventory = {};
    level.backgroundMusicFile = 'LurkingSloth-320bit.mp3';

    // NOTE LEAVING OUT "RUES"
    level.allWords = ['brake', 'coquette', 'croquette', 'detritus', 'dollhouse', 'drake', 'dyes', 'jerk', 'jerky', 'leopard', 'leotard',
        'rake', 'rubes', 'rubies', 'ruts', 'ryes', 'swami', 'swamp', 'tollhouse', 'tubers', 'tubes', 'tubs', 'whiskers', 'whiskeys']
    level.initialThings = [ ['whiskeys','room1',45,47],['jerk','room1',52,72],['croquette','room1',82,81],['drake','room2',25,81],['tollhouse','room3',22,55],['swami','room4',40,81],['leopard','room2',81,75],['detritus','room5',81,83],['rubes','room6',60,81] ];
    level.bonusWords = ['brake', 'dyes', 'rues', 'ruts', 'ryes', 'tubers', 'tubes', 'tubs'];
    level.targetThing = 'rubies';
    level.immovableObjects = ['brake', 'coquette', 'croquette', 'detritus', 'dollhouse', 'drake', 'jerk', 'leopard', 'rubes', 'ruts', 'ryes', 'swami', 'swamp', 'tollhouse', 'whiskers', 'whiskeys']
    level.initialRunes = [];

    level.goalDescription = 'Get some precious stones!';

    level.additionalImageNamesToPreload = ['coquette_0','coquette_1','coquette_2','coquette_3','coquette_4','jerk_0','jerk_1','jerk_2'];
    level.sounds = {
        'hey_baby' : new Audio(getLevelPathFromFolderName(level.folderName) + '/audio/hey_baby.m4a'),
        'whiskeys' : new Audio(getLevelPathFromFolderName(level.folderName) + '/audio/whiskeys.m4a'),
        'get_lost' : new Audio(getLevelPathFromFolderName(level.folderName) + '/audio/get_lost.m4a'),
        'what_the' : new Audio(getLevelPathFromFolderName(level.folderName) + '/audio/what_the.m4a'),
    }
    level.rooms = {
        'room1': {
            boundaries: [],
            filledPolygons: [],
            hasOwnBackgroundImage: true,
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_VERTICAL, 'N',68, 58, 'room2', 50, 90, true, 50, 77, 'jerk', PASSAGE_STATE_BLOCKED, 50, 70)],
        },
        'room2': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room3', 90, 77, true, 50, 77),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room5', 10, 77, true, 50, 77, 'leopard', PASSAGE_STATE_BLOCKED, 70, 80),
               new Passage(PassageTypes.INVISIBLE_VERTICAL, 'S',50, 97, 'room1', 74, 58, true, 35, 77)],
        },
        'room3': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',9, 82, 'room4', 90, 77, true, 73, 77, 'tollhouse', PASSAGE_STATE_BLOCKED, 26, 75),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room2', 10, 77, true, 50, 77)],
        },
        'room4': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room3', 10, 77, true, 50, 77)],
        },
        'room5': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room2', 90, 77, true, 50, 77),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 77, 'room6', 10, 77, true, 30, 77, 'detritus', PASSAGE_STATE_BLOCKED, 73, 75)],
        },
        'room6': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 77, 'room5', 90, 77, true, 50, 77)],
        },
    };
    return level;
}