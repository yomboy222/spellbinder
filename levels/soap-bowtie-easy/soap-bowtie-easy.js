/* soap-bowtie-easy.js */

/* code generated by command: python3 create_level.py "name=soap-bowtie-easy" "initialSpells=remove-letter,change-letter" "targetThing=treasure" "room=name:room1,things:bowtie soap hater,exits:E/room2/hater N/room0" "room=name:room0,things:jammer,exits:S/room1" "room=name:room2,things:partition,exits:E/room3/partition W/room1" "room=name:room3,things:ravelin,exits:E/room4/ravelin W/room2" "room=name:room4,things:treasure,exits:W/room3" */

levelList.push( { name:'soap-bowtie-easy', difficulty:0 } );

getLevelFunctions['soap-bowtie-easy'] = function() {

    let level = new Level('soap-bowtie-easy');
    level.levelPath = 'soap-bowtie-easy';

    level.defineThingSubclasses = function() { 

        window.Hater = class Hater extends Thing {
        }

        window.Partition = class Partition extends Thing {
        }

        window.Rammer = class Rammer extends Thing {
        }

        window.Ravelin = class Ravelin extends Thing {
        }

        window.Treasure = class Treasure extends Thing {
        }

        window.Water = class Water extends Thing {
        }

    }

    level.getThing = function(word,room,x,y) {
        switch (word) {
            case 'hater' : return new Hater(word,room,x,y);
            case 'partition' : return new Partition(word,room,x,y);
            case 'rammer' : return new Rammer(word,room,x,y);
            case 'ravelin' : return new Ravelin(word,room,x,y);
            case 'treasure' : return new Treasure(word,room,x,y);
            case 'water' : return new Water(word,room,x,y);
            default : return undefined; // this will cause instantiation of plain-vanilla Thing.
        }
    }
    level.initialRoom = 'room1';
    level.initialX = 50; // expressed as % of way across x axis, i.e. value range is 0-100 
    level.initialY = 55;
    level.initialSpells = [ 'remove-letter', 'change-letter' ];
    level.initialInventory = {};
    level.backgroundMusicFile = undefined;
    level.allWords = [ 'bootie','bowtie','hammer','hater','jammer','javelin','partition','paw','rammer','ravelin','sap','saw','soap','sop','treasure','water' ];
    level.initialThings = [ ['bowtie','room1',40,65],['soap','room1',60,65],['hater','room1',81,50],['jammer','room0',40,65],['partition','room2',81,50],['ravelin','room3',81,50],['treasure','room4',40,65] ];
    level.targetThing = 'treasure';
    level.initialRunes = [];

    level.rooms = {
        'room1': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 50, 'room2', 10, 50, true, 50, 50, 'hater', PASSAGE_STATE_BLOCKED, 73, 50),
               new Passage(PassageTypes.INVISIBLE_VERTICAL, 'N',50, 3, 'room0', 50, 90, true, 50, 50)],
        },
        'room0': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_VERTICAL, 'S',50, 97, 'room1', 50, 10, true, 50, 50)],
        },
        'room2': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 50, 'room3', 10, 50, true, 50, 50, 'partition', PASSAGE_STATE_BLOCKED, 73, 50),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 50, 'room1', 90, 50, true, 50, 50)],
        },
        'room3': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'E',97, 50, 'room4', 10, 50, true, 50, 50, 'ravelin', PASSAGE_STATE_BLOCKED, 73, 50),
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 50, 'room2', 90, 50, true, 50, 50)],
        },
        'room4': {
            boundaries: [],
            filledPolygons: [],
            passages: [ 
               new Passage(PassageTypes.INVISIBLE_HORIZONTAL, 'W',3, 50, 'room3', 90, 50, true, 50, 50)],
        },
    };
    return level;
}